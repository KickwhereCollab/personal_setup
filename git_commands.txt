Git commands

##     ## ######## ########   ######   ########
###   ### ##       ##     ## ##    ##  ##
#### #### ##       ##     ## ##        ##
## ### ## ######   ########  ##   #### ######
##     ## ##       ##   ##   ##    ##  ##
##     ## ##       ##    ##  ##    ##  ##
##     ## ######## ##     ##  ######   ########

[!] if there are merge conflicts in a submodule but you cannot see what files has the conflicts running git status, make sure you check out master branch in the submodule, then checkout your branch and resolve merge conflicts after that

git merge --no-ff --no-commit -Xignore-all-space <branch>
  - resolve any conflicts
  - follow with git commit to complete

git commit --allow-empty -m <msg>
  - commit without changes

git diff --name-only <branch>
  - get file paths of changed files

git branch --contains <commit>
[*] to list all branches that a commit has been merged into**

git branch -a --no-merge <branch>
  - check all (-a) branches that are not merged into the specified branch, if no branch specified, will check against current head.

 ######  ##     ##    ###    ##    ##  ######   ########  ######
##    ## ##     ##   ## ##   ###   ## ##    ##  ##       ##    ##
##       ##     ##  ##   ##  ####  ## ##        ##       ##
##       ######### ##     ## ## ## ## ##   #### ######    ######
##       ##     ## ######### ##  #### ##    ##  ##             ##
##    ## ##     ## ##     ## ##   ### ##    ##  ##       ##    ##
 ######  ##     ## ##     ## ##    ##  ######   ########  ######
git reset --hard HEAD^
  - removing the last commit

git reset --hard HEAD-2
  - removing the last two commits, you can increase the number to remove more commits

git reset HEAD^
  - remove commits but leave the working tree(keep the changes for reworking)

git checkout <branch> path/to/file.rad
  - check out specific file from selected branch and apply it. If want to apply whole commit, use git cherry-pick.

 ######  ##       ########    ###    ##    ##    ##     ## ########
##    ## ##       ##         ## ##   ###   ##    ##     ## ##     ##
##       ##       ##        ##   ##  ####  ##    ##     ## ##     ##
##       ##       ######   ##     ## ## ## ##    ##     ## ########
##       ##       ##       ######### ##  ####    ##     ## ##
##    ## ##       ##       ##     ## ##   ###    ##     ## ##
 ######  ######## ######## ##     ## ##    ##     #######  ##


MAKE SURE YOU WANT TO DELETE YOUR WORK!

git clean -nf
  - dry run to see what's going to happen. -n (dry run)

git clean -df
  - delete files and directories

git clean -fx
  - remove ignored and non-ignored files

git reset HEAD --hard
  - reset changes to tracked files, aka revert everything to the last commit

find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch
  - remove any existing files from the repo, skipping over ones not in repo

########  ##     ##  ######  ##     ##
##     ## ##     ## ##    ## ##     ##
##     ## ##     ## ##       ##     ##
########  ##     ##  ######  #########
##        ##     ##       ## ##     ##
##        ##     ## ##    ## ##     ##
##         #######   ######  ##     ##

git push -f origin +<branch>
  - force push to only one branch, use a + in front of the refspec to push

TO RESET REMOTE BRANCH
  git push origin :<branch>
    - pushes empty to remote, essentially deleting the remote branch
      i.e. <local>:<remote>
  git push origin <branch>
    - pushes clean/correct local up to remote


##     ## ####  ######  ########  #######  ########  ##    ##          ## ##        #######   ######
##     ##  ##  ##    ##    ##    ##     ## ##     ##  ##  ##          ##  ##       ##     ## ##    ##
##     ##  ##  ##          ##    ##     ## ##     ##   ####          ##   ##       ##     ## ##
#########  ##   ######     ##    ##     ## ########     ##          ##    ##       ##     ## ##   ####
##     ##  ##        ##    ##    ##     ## ##   ##      ##         ##     ##       ##     ## ##    ##
##     ##  ##  ##    ##    ##    ##     ## ##    ##     ##        ##      ##       ##     ## ##    ##
##     ## ####  ######     ##     #######  ##     ##    ##       ##       ########  #######   ######

 git rev-parse (--short) <HEAD>/<branch>/<HEAD^>
 - print hash

 git symbolic-ref (--short) <HEAD>
 - print current branch

git branch --contain <hash>
  - can be use to check if your branch has been merged


 ######  ##     ## ########  ##     ##  #######  ########  ##     ## ##       ########  ######
##    ## ##     ## ##     ## ###   ### ##     ## ##     ## ##     ## ##       ##       ##    ##
##       ##     ## ##     ## #### #### ##     ## ##     ## ##     ## ##       ##       ##
 ######  ##     ## ########  ## ### ## ##     ## ##     ## ##     ## ##       ######    ######
      ## ##     ## ##     ## ##     ## ##     ## ##     ## ##     ## ##       ##             ##
##    ## ##     ## ##     ## ##     ## ##     ## ##     ## ##     ## ##       ##       ##    ##
 ######   #######  ########  ##     ##  #######  ########   #######  ######## ########  ######

git submodule sync
  - if the gitmodules file is changed, or first time cloning the repo. Gotta sync up the submodule paths
