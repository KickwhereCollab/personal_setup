Change default editor to nano --

  add this to ~/.bash_profile:
  EDITOR=/usr/bin/nano; export EDITOR

  then use this command to activate it:
  . .bash_profile



sed : stream EDITOR


functions

PRINT JIRA TICKET NUMBER
function jira(){
        local SYS;
        if [[ $(uname) == "Linux" ]]
        then
          SYS="-r"
        elif [[ $(uname) == "Darwin" ]]
        then
          SYS="-E"
        fi
        git symbolic-ref --short HEAD | sed ${SYS} 's/^([A-Z]+)-([0-9]+)[_-].*/\1-\2/';
}


FETCH ALL
function FETCH(){
  echo "Fetching...";
  local returnDir="$(pwd)";
  cd "${HOME}/sites" && \
  pwd && \
  git fetch --all && \
  cd "${HOME}/member.abcmouse.com" && \
  pwd && \
  git fetch --all && \
  cd "${HOME}/member.abcmouse.cn" && \
  pwd && \
  git fetch --all && \
  cd "${HOME}/CoreServiceLayer" && \
  pwd && \
  git fetch --all && \
  cd "${HOME}/AbcMouseWebServiceLayer" && \
  pwd && \
  git fetch --all && \
  cd "${HOME}/apis" && \
  pwd && \
  git fetch --all;
  cd "$returnDir";
  [[ "$1" == '-s' ]] && STATUS;
}
FOR LOCAL
function FETCH(){
  local returnDir="$(pwd)";
  local baseDir="${HOME}/Documents/Work";
  echo && echo "Fetching...";
  cd "${baseDir}/sites" && echo && \
  basename "$(pwd)" && \
  git fetch --all && \
  cd "${baseDir}/member.abcmouse.com" && echo && \
  basename "$(pwd)" && \
  git fetch --all && \
  cd "${baseDir}/member.abcmouse.cn" && echo && \
  basename "$(pwd)" && \
  cd "$returnDir";
  [[ "$1" == '-s' ]] && STATUS;
}

STATUS ALL
function STATUS(){
  echo "Checking the status...";
  local returnDir="$(pwd)";
  cd "${HOME}/sites" && echo && \
  basename "$(pwd)" && \
  git status -sb && \
  cd "${HOME}/member.abcmouse.com" && echo && \
  basename "$(pwd)" && \
  git status -sb && \
  cd "${HOME}/member.abcmouse.cn" && echo && \
  basename "$(pwd)" && \
  git status -sb && \
  cd "${HOME}/CoreServiceLayer" && echo && \
  basename "$(pwd)" && \
  git status -sb && \
  cd "${HOME}/AbcMouseWebServiceLayer" && echo && \
  basename "$(pwd)" && \
  git status -sb && \
  cd "${HOME}/apis" && echo && \
  basename "$(pwd)" && \
  git status -sb;
  cd "$returnDir";
}

function TEST(){
  echo "what's your name?";
  read YOURNAME;
  echo "Hello, $YOURNAME!";
}


////// running all build within a directory
find <directory> -type <f(file)/(directory)> -name <"fileName"> [optional: -exec <action> {} \; ]
  find . -type f -name __build.js
  find `pwd` -type f -name __build.js -exec r.js -o {} \;



// Cut a new branch and make a clear record in the commit history

function CUTBRANCH () {
  local NEW_BRANCH="${1}";
  local BASE_BRANCH="$(git symbolic-ref --short HEAD)";
  local BASE_HASH="$(git rev-parse --short HEAD)";

  [[ -z $NEW_BRANCH ]]  && echo "Missing NEW_BRANCH"  && return 1;
  [[ -z $BASE_BRANCH ]] && echo "Missing BASE_BRANCH" && return 1;
  [[ -z $BASE_HASH ]]   && echo "Missing BASE_HASH"   && return 1;

  # explain resulting commands
  tput setaf 3; # add colors
  echo;
  echo "Will run these git commands:";
  echo "git checkout -b ${NEW_BRANCH}";
  echo "git commit --allow-empty -m \"${NEW_BRANCH} cut from ${BASE_BRANCH} (${BASE_HASH})\"";
  tput sgr0; # remove colors

  # prompt user for confirmation
  echo;
  # '-n' and '-p' options are specific to bash's read built-in command, it does not work the same in zsh
  # undo following line if switching back to bash
  # read -n 1 -p "Continue? [y/n] " CONFIRMATION;
  #
  # below is zsh version, Anything after a '?' in the first argument is used as the prompt string.
  # You can specify a variable name to read into, which is before the '?'
  read -k 1 "CONFIRMATION?Continue? [y/n]";
  echo;

  # execute commands, if permitted
  if [[ $CONFIRMATION == 'y' ]]; then
    git checkout -b "${NEW_BRANCH}" && \
    git commit --allow-empty -m "${NEW_BRANCH} cut from ${BASE_BRANCH} (${BASE_HASH})";
  fi
}
